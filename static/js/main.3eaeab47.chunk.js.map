{"version":3,"sources":["components/Todos.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todoList","length","map","todo","react_default","a","createElement","className","key","id","description","onClick","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","setState","target","value","handleSubmit","preventDefault","console","log","state","addTodo","onSubmit","type","onChange","placeholder","Component","App","filter","Math","random","concat","toConsumableArray","deadline","done","components_Todos","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3eaeab47.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todos = ({todos, deleteTodo}) => {\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return (\n               <div  className=\"content\" key={todo.id}> \n                 <div className=\"todoList\">\n                   <span className=\"listItem\">{todo.description}</span>\n                   <button className=\"del-btn\" onClick={() => {deleteTodo(todo.id)}}>X</button>    \n                 </div>                                                      \n               </div> \n            )\n        })\n    ) : (\n        <p>No todo's </p>\n        )\n    return (\n        <div className=\"my-todos\">\n          {todoList}\n        </div>\n    )  \n}\n\nexport default Todos;","import React, { Component } from 'react';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      description: \"\"\n    };\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      description: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(this.state);\n    this.props.addTodo(this.state);\n    this.setState({description: \"\"})\n  }\n  \n  render() {\n      return (\n          <div className=\"form\">\n            <form className=\"myForm\" onSubmit={this.handleSubmit}>\n              <input type=\"text\" onChange={this.handleChange} value={this.state.description} placeholder=\"New task\" />\n              <button type=\"submit\">Add Item</button>\n            </form>          \n          </div>\n      );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos.js';\nimport Form from './components/Form.js';\n\nclass App extends Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      todos:[\n      {\n      \"id\": 1,\n      \"description\": \"Get out of bed\",\n      \"deadline\": \"2017-09-11\",\n      \"done\": true\n      },\n      {\n      \"id\": 2,\n      \"description\": \"Brush teeth\",\n      \"deadline\": \"2017-09-10\",\n      \"done\": false\n      },\n      {\n      \"id\": 3,\n      \"description\": \"Eat breakfast\",\n      \"deadline\": \"2017-09-09\",\n      \"done\": false\n      }\n     ]\n    }    \n  } \n\n  deleteTodo = (id) => {\n    console.log(id);\n    const todos = this.state.todos.filter(todo => {\n      return todo.id !== id\n    });\n    this.setState({todos: todos})\n  }\n\n  addTodo = (todo) => {\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo];\n    this.setState({todos: todos});\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"header\"><i className=\"fas fa-clipboard-list\"></i><h2>Todo List</h2></div>\n        <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n        <Form addTodo={this.addTodo} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}